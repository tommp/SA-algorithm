	/*Check columns*/
	for(int col = 0; col < point.n; col++){
		for(int row = 0; row < point.m; row++){
			if(point.mask[row][col] == algvars::eggmark){
				linecounter++;
			}
		}
		if(point.k < linecounter){
			value -= (linecounter - point.k)*algvars::conflictcost;
		}
		linecounter = 0;
	}

	/*Check diagonals*/
	int diacount = 0;
	for(int row = 0; row < point.m; row++){
		diacount = 0;
		for(int col = 0; col < point.n; col++){
			if(point.mask[row+diacount][col] == algvars::eggmark){
				linecounter++;
			}
			if(diacount < point.m-1-row){
				diacount++;
			}
			else{
				break;
			}
		}
		if(point.k < linecounter){
			value -= (linecounter - point.k)*algvars::conflictcost;
		}
		linecounter = 0;
		diacount = 0;
		for(int col = point.n; col > 0; col--){
			if(point.mask[row+diacount][col] == algvars::eggmark){
				linecounter++;
			}
			if(diacount < point.m-1-row){
				diacount++;
			}
			else{
				break;
			}
		}
		if(point.k < linecounter){
			value -= (linecounter - point.k)*algvars::conflictcost;
		}
		linecounter = 0;
	}

	diacount = 0;
	for(int col = 1; col < point.n; col++){
		diacount = 0;
		for(int row = 0; row < point.m; row++){
			if(point.mask[row][col+diacount] == algvars::eggmark){
				linecounter++;
			}
			if(diacount < point.n-1-col){
				diacount++;
			}
			else{
				break;
			}
		}
		if(point.k < linecounter){
			value -= (linecounter - point.k)*algvars::conflictcost;
		}
		linecounter = 0;

		diacount = 0;
		for(int row = point.m-1; row > 0; row--){
			if(point.mask[row][col+diacount] == algvars::eggmark){
				linecounter++;
			}
			if(diacount < point.n-1-col){
				diacount++;
			}
			else{
				break;
			}
		}
		if(point.k < linecounter){
			value -= (linecounter - point.k)*algvars::conflictcost;
		}
		linecounter = 0;
	}